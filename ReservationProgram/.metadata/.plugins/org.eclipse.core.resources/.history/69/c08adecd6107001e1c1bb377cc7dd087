package ReservationProgram;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Pattern;

public class Reservation {

	static Scanner scanner = new Scanner(System.in);
	private static String date;// 날짜 입력
	private static String people;// 인원수 입력
	private static String time;// 시간 입력
	private static String input33;// 시간 정부 저장

	private static int minValue = Integer.MAX_VALUE;
	private static int tableNum = -1;// 자동 분배한 테이블 번호

	private static int reservationNumber;// 규칙을 준수하는 예약 번호

	static boolean needToReturnMainMenu = false;// true 이면 메뉴로 돌아가기.
	private static boolean TheDateIsSame = false;// 입력한 날짜와 가상 날짜가 같으면 true를 반환하여 당일 예약 가능 시간을 결정합니다.
	// 4. 예약은 늦어도 예약 시간보다 10분 전에 완료되어야 합니다. 따라서 입력되는
	// 시간은 프로그램 상의 현재 시간보다 10분 이상 이전의 시간이어야 합니다.

	private static String virtualdate = null;// 가상 날짜 얻다.
	private static String virtualtime = null;// 가상 시간 얻다.

	private static TableData[] tableData2;// table 읽이
	private ArrayList<TableData> tableData3;
	private static ArrayList<ReservationData> reservationData2;

	private ReservationDataFileManager reservationData;
	private TableDataFileManager tableData;
	private AccountDataFileManager accountData;
	
	Set<String> availableTimeSet;
	
	private int userAccountIndex;
	VirtualTime virtualTime1 = new VirtualTime();
	
	ArrayList<boolean[]> tableReservableData = new <();
	
	
	//2차 프로젝트로 추가되는 멤버
	public static final double pointRatio = 0.05;	//포인트 적립 비율

	private RestaurantDataFileManager restaurantData;
	private static int restaurantIndex;	//식당 입력 부분에서 입력받은 식당의 인덱스
	private static OrderedMenuInfo orderedMenu;	
	private static int totalMenuPrice;	//메뉴의 총합가격
	private int pointDeduction = -1;	//usePointAmount에서 입력받은 사용자가 사용할 마일리지의 양, 음수일 경우 사용하지 않는 것으로 간주. 초기값 -1.
	public String choice;
	///////////////////////////

	Reservation(int userAccountIndex, VirtualTime virtualTime, AccountDataFileManager accountData,
			ReservationDataFileManager reservationData, TableDataFileManager tableData, RestaurantDataFileManager restaurantData) {

		this.reservationData=reservationData;
		this.tableData=tableData;
		this.userAccountIndex = userAccountIndex;
		this.virtualTime1 = virtualTime;
		TableDataFileManager tableData1 = new TableDataFileManager();
		tableData1.LoadDataFile("tabledata.txt");
		tableData2 = tableData1.getTableData();

		// virtualTime1.prompt();// 테스트 하기위해 쓰는 거 삭제해도 돼요
		try {
			virtualdate = virtualTime1.getTime().StringDate("");
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// 가상날짜
		try {
			virtualtime = virtualTime1.getTime().StringTime();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// 가상 시간
		// System.out.println(virtualdate);
		// System.out.println(virtualtime);
		this.restaurantData=restaurantData;
		this.accountData = accountData;
	}

	public int prompt() {
		ReserveRestaurant();
		if (needToReturnMainMenu) {
			needToReturnMainMenu=false;
			return -1;
		}
		ReserveCount();// 예약 인원
		if (needToReturnMainMenu) {
			needToReturnMainMenu=false;
			return -1;
		}
				
		ReserveDate();// 예약 날짜
		if (needToReturnMainMenu) {
			needToReturnMainMenu=false;
			return -1;
		}

		PrintTime();// 예약가능 여부 시간 출력
		ReserveTIME();// 예약 시간
		if (needToReturnMainMenu) {
			needToReturnMainMenu=false;
			return -1;
		}

		ReserveMenu();
		if (needToReturnMainMenu) {
			needToReturnMainMenu=false;
			return -1;
		}
		usePointAmount();
		if (needToReturnMainMenu) {
			needToReturnMainMenu=false;
			return -1;
		}
		payCash();
		if (needToReturnMainMenu) {
			needToReturnMainMenu=false;
			return -1;
		}
		adjustPoint();
		assignReservationNumber();// 예약 번호 자동 분배
		saveReservation();// 예약내용 파일에 저장
		System.out.println("예약이 완료되었습니다.");
		return 0;
	}


	private int chooseTable() {
		LocalTime t1 = LocalTime.parse(time);
		LocalTime t2 = LocalTime.parse("00:00");
		Duration duration = Duration.between(t1, t2);
		int chosenTimeIndex = (int) (Math.abs(duration.getSeconds())/1800);
		int i=0;
		int chosenTableIndex = -1;
		int minimumAccomodatable=Integer.MAX_VALUE;
		for(boolean b : this.tableReservableData.get(chosenTimeIndex)) {
			if(b) {
				if(tableData3.get(i).accommodatablePeople==Integer.parseInt(people)) {
					chosenTableIndex = i;
					break;
				}
				else if(tableData3.get(i).accommodatablePeople<=minimumAccomodatable
						&&tableData3.get(i).accommodatablePeople>=Integer.parseInt(people)) {
					chosenTableIndex = i;
					minimumAccomodatable =tableData3.get(i).accommodatablePeople; 
				}
			}
			i++;
		}
		return chosenTableIndex;
	}
	
	private void saveReservation() {
		// TODO Auto-generated method stub

		// 예약내용 파일에 저장 부분

		int chosenTableIndex = chooseTable();
		
		String userinput = date;
		String cleanedDate = userinput.replaceAll("[^\\d]", "");
		String year = cleanedDate.substring(0, 4);
		String month = cleanedDate.substring(4, 6);
		String day = cleanedDate.substring(6, 8);

		String userinput1 = input33;
		String cleanedDate1 = userinput1.replaceAll("[^\\d]", "");
		String hour = cleanedDate1.substring(0, 2);
		String minute = cleanedDate1.substring(2, 4);

		Time time = new Time(Integer.parseInt(year), Integer.parseInt(month), Integer.parseInt(day),
				Integer.parseInt(hour), Integer.parseInt(minute));
		// System.out.println(time.min);
		int intValue = Integer.parseInt(people);// 예약 인원수
		String status = "예정";
		ReservationDataFileManager reservationData1 = new ReservationDataFileManager();
		reservationData1.AddReservation(userAccountIndex, time, intValue, chosenTableIndex, reservationNumber, status, , );
	}

	private void assignReservationNumber() {
		// 예약 번호 자동 분배 부분

		// 예약 데이터 파일을 열고 마지막 예약 기록의 예약 번호를 읽습니다
		int lastReservationNumber = 0;
		int k = 0;
		try (Scanner scanner = new Scanner(new File("Reservation.txt"))) {
			while (scanner.hasNextLine()) {
				k++;
				String line = scanner.nextLine();

				if (k == 6) {
					k = -1;

					int reservationNumber = Integer.parseInt(line);
					if (reservationNumber > lastReservationNumber) {
						lastReservationNumber = reservationNumber;

					}

				}

			}
		} catch (FileNotFoundException e) {
			// 처리 파일 이상 없음
		}

		// 예약번호에 1을 더하여 999를 넘지 않도록 한다.
		reservationNumber = (lastReservationNumber % 999) + 1;
		System.out.println(reservationNumber);
	}

	private void ReserveTIME() {
		// TODO Auto-generated method stub

		// 예약 시간 부분

		while (true) {
			System.out.println("예약을 원하는 시간을 입력하세요. 예약 시간 입력의 규칙은 다음과 같습니다.\r\n" + "1. 숫자, ‘:’로 이루어진 문자열입니다.\r\n"
					+ "2. HH24:MI(시간:분) 형식을 가집니다.\r\n" + "3. 시간 부분은 00부터 24 사이의 숫자, 분 부분에는 00, 30중 하나가 입력되어야\r\n"
					+ "합니다. 즉, 30분 단위로 예약이 가능합니다.\r\n" + "4. 예약은 늦어도 예약 시간보다 10분 전에 완료되어야 합니다. 따라서 입력되는\r\n"
					+ "시간은 프로그램 상의 현재 시간보다 10분 이상 이전의 시간이어야 합니다.\r\n" + "(c 입력 시 메뉴 화면으로 돌아가기) :");

			time = scanner.nextLine();

			if (time.equals("c")) {

				needToReturnMainMenu = true;
				break;

			}

			try {
				if(!this.availableTimeSet.contains(time))
					throw new IllegalArgumentException("[오류] 입력하신 시간은 예약 가능한 시간이 아닙니다.\r\n" + "");
				String[] timeParts = time.split(":");
				int hour1 = Integer.parseInt(timeParts[0]);
				int minute2 = Integer.parseInt(timeParts[1]);
				input33 = String.format("%02d:%02d", hour1, minute2);

				Pattern pattern = Pattern.compile("^([01]\\d|2[0-3]):([0-5]\\d)$");// 형식 구별
				if (!pattern.matcher(input33).matches()) {
					throw new IllegalArgumentException("[오류] 시간 입력 규칙에 어긋난 입력입니다. 다시 입력해 주세요.\r\n" + "");
				}
				// 위의 부분 : 형식 판단

				int hour = Integer.parseInt(input33.substring(0, 2));
				int minute = Integer.parseInt(input33.substring(3));

				if (minute != 0 && minute != 30) {
					throw new IllegalArgumentException("[오류] 시간 입력 규칙에 어긋난 입력입니다. 다시 입력해 주세요.\r\n" + "");
				}
				// 위의 부분 : 분은 0 or 30 확인

				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
				LocalTime date1 = LocalTime.parse(virtualtime, formatter);// 현재 가상시간
				LocalTime date2 = LocalTime.parse(input33, formatter);// 입력 받은 시간

				if (date2.isBefore(date1.plusMinutes(10)) && TheDateIsSame) {
					throw new IllegalArgumentException(
							"[오류] 입력되는 시간은 프로그램 상의 현재 시간보다 10분 이상 이전의 시간이어야\r\n" + "합니다.\r\n" + "");

				}

				break;// 위의 부분은 가상날짜 비교하고 가상시간 도 비교하다.
			} catch (NumberFormatException e) {
				System.out.println("[오류] 시간 입력 규칙에 어긋난 입력입니다. 다시 입력해 주세요.\r\n" + "");
			}
			catch(IllegalArgumentException e) {
				System.out.println(e.getLocalizedMessage());
			}
			catch(Exception e) {
				e.printStackTrace();
			}

		} // while

	}

	private void PrintTime() {
		// TODO Auto-generated method stub

		// 예약가능 여부 시간 출력 부분

		
		try {
		String userInput = date;
		String cleanedDate = userInput.replaceAll("[^\\d]", "");// 어떤 형식이더라도 YYYYMMDD 형식으로 표시 한다.
		String formattedDate = cleanedDate.replaceAll("(\\d{4})(\\d{2})(\\d{2})", "$1/$2/$3");
		System.out.println(formattedDate); // 입력된 날짜 어떤 형식이더라도 YYYY/MM/DD 형식으로 표시 한다.
		String line;// 파일 일기 하기위해
		String readdate = null;// 사용자 입력 날짜 검생 한후에 가능여부 시간 출력
		// HashSet内部，元素的顺序是不固定的.所以这里用LinkedHashSet
		ArrayList<String> timeSet = new ArrayList<>(Arrays.asList("00:00", "00:30", "01:00", "01:30", "02:00", "02:30",
				"03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00",
				"08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30",
				"14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00",
				"19:30", "20:00", "20:30", "21:00", "21:30", "22:00", "22:30", "23:00", "23:30"));

		Set<String> timeSetRepeat = new HashSet<>(Arrays.asList());// 如果已经被预定的时间，则存储在这里面

		Set<String> timeSetRepeat2 = new HashSet<>(Arrays.asList());// 已经被预定的时间并且包括前后总共2小时的时间都存储在这里
		this.tableData3 = new ArrayList<>(Arrays.asList(this.tableData.getTableData()));
		this.reservationData2 = this.reservationData.getReservationData(0);
		for(String s : timeSet) {
			boolean isTableReservable[] = new boolean[tableData3.size()];
			for(int i=0;i<isTableReservable.length;i++)
				isTableReservable[i]=true;
			for(int i=0;i<reservationData2.size();i++) {
				if(!reservationData2.get(i).status.equals("예정"))
					continue;
				Time t= reservationData2.get(i).time;
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
				LocalDateTime t1 = LocalDateTime.parse(t.StringDate("-")+" "+t.StringTime(), formatter);
				formatter = DateTimeFormatter.ofPattern("yyyyMMdd HH:mm");
				LocalDateTime t2 = LocalDateTime.parse(this.date+" "+s, formatter);
				Duration duration = Duration.between(t1, t2);
				if(Math.abs(duration.getSeconds())<=3600) {
					int j=0;
					for(TableData td : tableData3) {
						if(td.tableNum==reservationData2.get(i).tableNum) {
							isTableReservable[j]=false;
							break;
						}
						j++;
					}
				}
				
			}
			int j=0;
			for(TableData td : tableData3) {
				if(td.accommodatablePeople<Integer.parseInt(people)) {
					isTableReservable[j]=false;
				}
				j++;
			}
			
			for(boolean b : isTableReservable) {
				if(b) {
					timeSetRepeat2.add(s);
					break;
				}
			}
			tableReservableData.add(isTableReservable);
		}
		
		this.availableTimeSet=timeSetRepeat2;
		
		int i = 0;
		for (String time : timeSet) {
			i++;
			if (timeSetRepeat2.contains(time)) {
				System.out.print(time + " 예약가능 ");
				if (i == 5) {
					i = 0;// 每打印5个就换一行
					System.out.println();
				}
			} else {
				System.out.print(time + " 예약불가 ");
				if (i == 5) {
					i = 0;
					System.out.println();
				}
			}
		}
		System.out.println();
	
		
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		/*
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));

			try {
				int j = 0;
				int k = 0;
				while ((line = br.readLine()) != null) {
					if (cleanedDate.equals(line)) {
						readdate = line;
						// System.out.println("文件里有存储输入的日期");
						j = 3;
					}
					if (j == 3) {
						k++;// 입력된 날짜가 파일 에서 있으면 3번쩨 저장한 시간내용을 검색
					}
					if (k == 2) {
						// 检查时间字符串是否存在于 Set 集合对象中
						if (timeSet.contains(line)) {
							// System.out.println("重复的时间：" + line);
							timeSetRepeat.add(line);// 만약 중복된 내용이 있다면, 그것을 여기에 넣으요.
							timeSetRepeat2.add(line);// 예약된 시간과 전후를 포함하여 총 2시간의 시간을 여기에
														// 저장합니다.已经被预定的时间并且包括前后总共2小时的时间都存储在这里
						}
						k = 0;
						j = 0;
					}
				}

				// 将时间字符串解析为LocalTime对象，进行加减操作
				for (String timeString : timeSetRepeat) {
					LocalTime time = LocalTime.parse(timeString, DateTimeFormatter.ofPattern("HH:mm"));

					LocalTime time2 = time.minusHours(1);
					LocalTime time1 = time.minusMinutes(30);
					LocalTime time3 = time.plusMinutes(30);
					LocalTime time4 = time.plusHours(1);

					String timeString1 = time1.format(DateTimeFormatter.ofPattern("HH:mm"));
					String timeString2 = time2.format(DateTimeFormatter.ofPattern("HH:mm"));
					String timeString3 = time3.format(DateTimeFormatter.ofPattern("HH:mm"));
					String timeString4 = time4.format(DateTimeFormatter.ofPattern("HH:mm"));

					timeSetRepeat2.add(timeString1);
					timeSetRepeat2.add(timeString2);
					timeSetRepeat2.add(timeString3);
					timeSetRepeat2.add(timeString4);

				} // 위의 부분은 이미 예약이 된 시간의 1시간 전과 1시간 후의 시간을 timeSetRepeat2에 저장하는 것입니다.
					// timeSetRepeat2는 예약이 불가능한 시간을 저장하는 데 사용됩니다.

				if (readdate != null) {
					int i = 0;
					for (String time : timeSet) {
						i++;
						if (timeSetRepeat2.contains(time)) {
							System.out.print(time + " 예약불가 ");
							if (i == 5) {
								i = 0;// 每打印5个就换一行
								System.out.println();
							}
						} else {
							System.out.print(time + " 예약가능 ");
							if (i == 5) {
								i = 0;
								System.out.println();
							}
						}
					}
					System.out.println();
				} else // 파일 에서 예약 없는 날짜의 시간예약가능 여부를 출력하다.
				{
					int i = 0;
					for (String time : timeSet) {
						i++;
						System.out.print(time + " 예약가능 ");
						if (i == 5) {
							i = 0;
							System.out.println();
						}
					}
					System.out.println();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			// 关闭文件流
			try {
				br.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
*/
	}

	public void ReserveCount() {
		// 예약 인원 부분

		this.tableData3 = new ArrayList<>(Arrays.asList(this.tableData.getTableData()));
		int maxValue = 0;
		for (int i = 0; i < tableData3.size(); i++) {
			if (tableData3.get(i).accommodatablePeople > maxValue) {
				maxValue = tableData3.get(i).accommodatablePeople;
			}
		} // 위의 부분 table 수에 따라 최대 제한 인원수를 얻다.

		while (true) {
			System.out.println("[좌석 예약하기]");
			System.out.println("예약할 인원 수를 입력하세요. 최대 " + maxValue + "명까지 입력 가능합니다.");
			System.out.println("(c 입력 시 메뉴 화면으로 돌아가기) :");

			people = scanner.nextLine();

			if (people.equals("c")) {

				needToReturnMainMenu = true;
				break;

			} else {
				try {

					int number = Integer.parseInt(people);// 숫자,인원수

					for (TableData table : tableData2) {
						if (table.accommodatablePeople >= number && table.accommodatablePeople < minValue) {
							minValue = table.accommodatablePeople;
							tableNum = table.tableNum;
						} else if (table.accommodatablePeople == minValue && table.tableNum < tableNum) {
							tableNum = table.tableNum;
						}
					}
					
					 //if (tableNum != -1) { System.out.println("可容纳的最小的桌子是" + tableNum); } else {
					 //System.out.println("无法容纳该人数的桌子"); }
					 
					// 위의 부분은 1. 예약 가능한 테이블들 중 수용 가능 인원 수가 가장 적은 테이블이 우선도가 가장
					// 높다. 2. 수용 가능 인원 수가 같은 테이블의 경우 테이블 번호가 작은 테이블이 우선도가 더
					// 높다. 요구를 실현 부분이다.
					break;
				} catch (NumberFormatException e) {
					System.out.println("[오류] 규칙에 어긋난 입력입니다. 다시 입력해 주세요.\n\n");
				}
			}

		}

	}

	public static void ReserveDate() {
		// 예약 날짜 부분
		while (true) {
			System.out.println("[좌석 예약하기]");
			System.out.println("예약을 원하는 날짜를 입력하세요. 날짜 입력 형식은 다음 중 하나입니다.");
			System.out.println("(c 입력 시 메뉴 화면으로 돌아가기) :");
			System.out.println("YYYY/MM/DD\r\n" + "YYYY.MM.DD\r\n" + "YYYY-MM-DD\r\n" + "YYYYMMDD\r\n" + "YY/MM/DD\r\n"
					+ "YY.MM.DD\r\n" + "YY-MM-DD\r\n" + "YYMMDD");
			System.out.println("-존재하지 않는 날짜는 입력할 수 없습니다:");
			date = scanner.nextLine();

			if (date.equals("c")) {

				needToReturnMainMenu = true;
				break;

			} else {
				try {
					String dateRegex = "((20)\\d{2})(\\/|\\.|\\-)?(0?[1-9]|1[012])(\\/|\\.|\\-)?(0?[1-9]|[12][0-9]|3[01])|"
							+ "(\\d{2})(\\/|\\.|\\-)?(0?[1-9]|1[012])(\\/|\\.|\\-)?(0?[1-9]|[12][0-9]|3[01])";
					if (date.matches(dateRegex)) {
						String userInput = date;
						String cleanedDate = userInput.replaceAll("[^\\d]", "");
						//System.out.println("입력한 날짜: " + cleanedDate);
						if (cleanedDate.length() == 6) {
							cleanedDate = "20" + cleanedDate; // assume it's in YYMMDD format, convert to YYYYMMDD
							date = cleanedDate;// YYMMDD형식 입력해도 YYYYDDMM형식 저장
						}
						// System.out.println("成功了");
						if (date.matches(".*02([\\/|\\.|\\-]?)[2][89](?!\\d)([\\/|\\.|\\-]?).*")) {
							//System.out.println("if에 걸림");
							throw new Exception();
						}
						//System.out.println("if를 지남");
					} else {
						//System.out.println("else에 걸림");
						throw new Exception();
					}

					dateComparison();// 가상 날짜 비교
					break;
				} catch (Exception e) {
					System.out.println("[오류] 날짜 입력 규칙에 어긋난 입력입니다. 다시 입력해 주세요.\r\n" + "");
				}
			}

		} // while

	}

	public static void dateComparison() {
		// 가상 날짜 비교 부분

		try {
			//System.out.println("a");
			String userInput = date;
			//System.out.println("b");
			String cleanedDate = userInput.replaceAll("[^\\d]", "");
			//System.out.println("c");
			if (cleanedDate.length() == 6) {
				cleanedDate = "20" + cleanedDate; // assume it's in YYMMDD format, convert to YYYYMMDD
			}
			//System.out.println("d");
			String userInput1 = cleanedDate;
			//System.out.println("e");
			userInput1 = cleanedDate.replaceAll("(\\d{4})(\\d{2})(\\d{2})", "$1$2$3");
			//System.out.println("f");
			// DateTimeFormatter formatter =
			// DateTimeFormatter.ofPattern("yyyy'Null'MM'Null'dd");
			//System.out.println("g");
//			System.out.println("1/ 입력한 날짜: " + userInput1);
			//System.out.println("2/ 지금 날짜: " + virtualdate);
			// LocalDate date1 = LocalDate.parse(userInput1, formatter);//사용자 입력된 날짜
			int userDate = Integer.parseInt(userInput1);
			int virtDate = Integer.parseInt(virtualdate);
			//System.out.println("1/ 입력한 날짜: " + userDate);
			// LocalDate date2 = LocalDate.parse(virtualdate, formatter);//가상 시간 날짜
			//System.out.println("2/ 지금 날짜: " + virtDate);
			if (userDate < virtDate) {
				throw new Exception();
			} else if (userDate == virtDate) {
				TheDateIsSame = true;
			}
		} catch (Exception e) {
			System.out.println(
					"[오류] 프로그램 상 현재 날짜 이전의 날짜가 입력되었습니다. 프로그램 상 현재 날짜와\r\n" + "동일한 날짜나 이후의 날짜를 입력해 주세요.\r\n" + "");
			ReserveDate();
		}

	}
	
	/*
	Scanner scan = new Scanner(System.in);
	VirtualTime vt = new VirtualTime();
	AccountDataFileManager accDFM = new AccountDataFileManager();
	ReservationDataFileManager resrvDFM = new ReservationDataFileManager();
	TableDataFileManager tbDFM = new TableDataFileManager();
	private static String date, people, time;
	private static int UAI, ppl, bigTable = 6, year, month, day, hour, min;
	int[] MONTHS = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	boolean[] tcheck = new boolean[48];
	
	Reservation(int userAccountIndex, VirtualTime virtualTime, AccountDataFileManager accountData,
			ReservationDataFileManager reservationData, TableDataFileManager tableData) {

		this.UAI = userAccountIndex;
		this.vt = virtualTime;
		this.accDFM = accountData;
		this.resrvDFM = reservationData;
		this.tbDFM = tableData;
		
		Arrays.fill(tcheck, true);	
	}
	
	public int prompt() {
		while(true) {
			System.out.print("[좌석 예약하기]\r\n"
					+ "예약할 인원 수를 입력하세요. 최대 " + bigTable+ "명까지 입력 가능합니다.\r\n"
					+ "(c 입력 시 메뉴 화면으로 돌아가기): ");
			people = scan.nextLine();
			if(people.compareTo("c") == 0 || people.compareTo("C") == 0) {
				return -1;
			}
			try {
				ppl = Integer.parseInt(people);
			}catch(NumberFormatException e){
				System.out.println("[오류] 규칙에 어긋난 입력입니다. 다시 입력해 주세요.");
				continue;
			}
			if(ppl > bigTable) {
				System.out.println("[오류] 규칙에 어긋난 입력입니다. 다시 입력해 주세요.");
				continue;
			}
			while(true) {
				System.out.print("[좌석 예약하기]\r\n"
						+ "예약을 원하는 날짜를 입력하세요. 날짜 입력 형식은 다음 중 하나입니다.\r\n"
						+ "YYYY/MM/DD\r\n"
						+ "YYYY.MM.DD\r\n"
						+ "YYYY-MM-DD\r\n"
						+ "YYYYMMDD\r\n"
						+ "YY/MM/DD\r\n"
						+ "YY.MM.DD\r\n"
						+ "YY-MM-DD\r\n"
						+ "YYMMDD\r\n"
						+ "또한 다음 규칙을 지켜야 합니다.\r\n"
						+ "-존재하지 않는 날짜는 입력할 수 없습니다.\r\n"
						+ "-현재 날짜 이전의 날짜를 입력할 수 없습니다.\r\n"
						+ "-예약일은 현재 날짜로부터 30일 이내의 날짜여야 합니다.\r\n"
						+ "\r\n"
						+ "(c 입력 시 메뉴 화면으로 돌아가기): ");
				date = scan.nextLine();
				if(date.compareTo("c") == 0 || date.compareTo("C") == 0) {
					return -1;
				}
				date.replaceAll(" ", "");
				if((!vt.split(date)) && (!vt.split(date, "/")) && (!vt.split(date, "\\.")) && (!vt.split(date, "-"))) {
					System.out.println("[오류] 날짜 입력 규칙에 어긋난 입력입니다. 다시 입력해주세요.\n");
					continue;
				}
				if(date.length() == 6) {
					date = "20" + date;
				}
				year = Integer.parseInt(date.substring(0, 4)); //0, 1, 2, 3
				month = Integer.parseInt(date.substring(4, 6)); //4, 5
				day = Integer.parseInt(date.substring(6, 8)); //6, 7
				System.out.println("y:" + year + " m:" + month + " d:" + day);
				System.out.println("y:" + vt.getTime().year + " m:" + vt.getTime().month + " d:" + vt.getTime().day);
				try {
					if(day <=0 || day > MONTHS[month]) {
						System.out.println("[오류] 날짜 입력 규칙에 어긋난 입력입니다. 다시 입력해주세요.\n");
						continue;
					}
				}catch(ArrayIndexOutOfBoundsException e) {
					System.out.println("[오류] 날짜 입력 규칙에 어긋난 입력입니다. 다시 입력해주세요.\n");
					continue;
				}
				
				if(year < vt.getTime().year) {
					System.out.println("[오류] 프로그램 상 현재 날짜 이전의 날짜가 입력되었습니다. 프로그램 상 현재 날짜와 동일한 날짜나 이후의 날짜를 입력해 주세요.\n");
					continue;
				}else {
					if(month < vt.getTime().month) {
						System.out.println("[오류] 프로그램 상 현재 날짜 이전의 날짜가 입력되었습니다. 프로그램 상 현재 날짜와 동일한 날짜나 이후의 날짜를 입력해 주세요.\n");
						continue;
					}else {
						if(day < vt.getTime().day) {
							System.out.println("[오류] 프로그램 상 현재 날짜 이전의 날짜가 입력되었습니다. 프로그램 상 현재 날짜와 동일한 날짜나 이후의 날짜를 입력해 주세요.\n");
							continue;
						}
					}
				}
				if(month > Integer.parseInt(vt.getTime().StringDate("").substring(4, 6))) {
					if(day >  30 - (MONTHS[Integer.parseInt(vt.getTime().StringDate("").substring(4, 6))] - Integer.parseInt(vt.getTime().StringDate("").substring(6, 8)))) {
						System.out.print("[오류] 예약일은 프로그램 상의 현재 날짜로부터 30일 이내의 날짜여야 합니다.");
					}
				}else {
					if(MONTHS[month] != 31) {
						System.out.print("[오류] 예약일은 프로그램 상의 현재 날짜로부터 30일 이내의 날짜여야 합니다.");
					}else if(day != 1) {
						System.out.print("[오류] 예약일은 프로그램 상의 현재 날짜로부터 30일 이내의 날짜여야 합니다.");
					}
				}
				while(true) {
					System.out.print(date.substring(0, 4) + "/" + date.substring(4, 6) + "/" + date.substring(6, 8));
					File DataFile = new File("Reservation.txt");
					try {
						Scanner sc = new Scanner(DataFile);
						while(sc.hasNextLine()) {
							if(date.compareTo(sc.nextLine()) == 0) {
								String temp = sc.nextLine();
								if(Integer.parseInt(temp.substring(3, 5)) == 0) {
									tcheck[Integer.parseInt(temp.substring(0, 2)) * 2] = false;
								}else {
									tcheck[Integer.parseInt(temp.substring(0, 2)) * 2 + 1] = false;
								}
							}
						}
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					for(int i = 0; i < 48; i++) {
						System.out.print(String.format("%02d", (i / 2)) + ":" + String.format("%02d", (i % 2) * 30) + " ");
						if(tcheck[i]) {
							System.out.print("예약 가능");
						}else {
							System.out.print("예약 불가");
						}
						if((i - 4) % 5 == 0) {
							System.out.println();
						}
					}
					while(true) {
						System.out.print("예약을 원하는 시간을 입력하세요. 예약 시간 입력의 규칙은 다음과 같습니다.\r\n"
								+ "1. 숫자, ‘:’로 이루어진 문자열입니다.\r\n"
								+ "2. HH24:MI(시간:분) 형식을 가집니다.\r\n"
								+ "3. 시간 부분은 00부터 24 사이의 숫자, 분 부분에는 00, 30중 하나가 입력되어야 합니다. 즉, 30분 단위로 예약이 가능합니다.\r\n"
								+ "4. 예약은 늦어도 예약 시간보다 10분 전에 완료되어야 합니다. 따라서 입력되는 시간은 프로그램 상의 현재 시간보다 10분 이상 이전의 시간이어야 합니다.\r\n"
								+ "(c 입력 시 메뉴 화면으로 돌아가기): ");
						time = scan.nextLine();
						if(time.compareTo("c") == 0 || time.compareTo("C") == 0) {
							return -1;
						}
						time.replaceAll(" ", "");
						if((!vt.split(time, ":"))) {
							System.out.println("[오류] 시간 입력 규칙에 어긋난 입력입니다. 다시 입력해주세요.\n");
							continue;
						}
						hour = Integer.parseInt(time.substring(0, 1));
						min = Integer.parseInt(time.substring(3, 4));
						if(hour < 0 || hour > 23) {
							System.out.println("[오류] 시간 입력 규칙에 어긋난 입력입니다. 다시 입력해주세요.\n");
							continue;
						}else if(min < 0 || min > 59) {
							System.out.println("[오류] 시간 입력 규칙에 어긋난 입력입니다. 다시 입력해주세요.\n");
							continue;
						}else if(min != 0 && min != 30) {
							System.out.println("[오류] 입력하신 시간은 예약 가능한 시간이 아닙니다.");
							continue;
						}
						if(day == vt.getTime().day) {
							if(hour == vt.getTime().hour) {
								if(min < vt.getTime().min + 10) {
									System.out.println("[오류] 입력되는 시간은 프로그램 상의 현재 시간보다 10분 이상 이전의 시간이어야 합니다.");
									continue;
								}
							}
						}
						if(!tcheck[hour * 2 + min / 30]) {
							System.out.println("[오류] 입력하신 시간은 예약 가능한 시간이 아닙니다.");
							continue;
						}
						
					}
				}
			}
			
		}
	}
	*/
	
	//2차 프로젝트로 추가되는 메소드
	private void ReserveRestaurant() {
		while(true) {
			System.out.println("[좌석 예약하기]");
			ArrayList<RestaurantData> restaurantDataList = restaurantData.getRestaurantData();
			if(restaurantDataList.size()==0) {
				needToReturnMainMenu=true;
				break;
			}
			for(int i=0;i<restaurantDataList.size();i++) {
				System.out.println((i+1)+". "+restaurantDataList.get(i).restaurantName);
			}
			System.out.println("\n예약을 원하는 식당의 번호를 입력해주세요.(c 입력 시 메뉴 화면으로 돌아가기): ");
			
			String input = scanner.nextLine();
			if(input.equals("c")) {
				needToReturnMainMenu=true;
				break;
			}
			else if(this.isInteger(input)) {
				int inputInt = Integer.parseInt(input);
				if(inputInt>=1&&inputInt<=restaurantDataList.size()) {
					if(restaurantDataList.get(inputInt-1).menuInfo.menuName.length>=1) {
						restaurantIndex = inputInt-1;
						tableData.LoadDataFile("Restaurant_"+restaurantDataList.get(restaurantIndex).restaurantName + ".txt");
					}
					else {
						System.out.println("[오류] 선택하신 식당에 등록된 메뉴가 없어 예약하실 수 없습니다.");
						continue;
					}
				}
				else {
					System.out.println("[오류] 1 이상 "+restaurantDataList.size()+" 이하의 정수를 입력해 주세요.");
					continue;
				}
			}
			else {
				System.out.println("[오류] 1 이상 "+restaurantDataList.size()+" 이하의 정수를 입력해 주세요.");
				continue;
			}
		}
	}
	
	private void ReserveMenu() {
		while(true) {
			System.out.println("[메뉴 예약]\n");
			System.out.println("예약하실 메뉴를 선택해주세요.\n");
			MenuInfo menuInfo = restaurantData.getRestaurantData().get(restaurantIndex).menuInfo;
			
			for(int i=0;i<menuInfo.menuName.length;i++) {
				System.out.println((i+1)+". "+menuInfo.menuName[i]+": "+menuInfo.menuPrice[i]+"원");
			}
			
			System.out.println("\n예약하실 메뉴의 번호와 개수를 다음과 같은 형식에 따라 입력해주세요.\n"
					+ "(여러 개의 메뉴를 입력 시 아래 형식에 따라 한번에 모두 입력합니다.)\n\n"
					+ "(메뉴 번호) <space> (메뉴 개수) <tab>\n\n"
					+ "(c 입력 시 메뉴 화면으로 돌아가기):");
			String input = scanner.nextLine();
			if(input.equals("c")) {
				needToReturnMainMenu=true;
				break;
			}
			else{
				try {
					orderedMenu = restaurantData.StringToOrderedMenuInfo(input);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					System.out.println("[오류] 입력 형식에 맞게 다시 입력해주세요.");
					continue;
				}
				for(int i=0;i<orderedMenu.menuIndex.length;i++) {
					orderedMenu.menuIndex[i] += -1;
				}
				totalMenuPrice = 0;
				for(int i=0;i<orderedMenu.menuIndex.length;i++) {
					totalMenuPrice+=menuInfo.menuPrice[orderedMenu.menuIndex[i]]*orderedMenu.orderedAmount[i];
				}
				
				System.out.println("주문하신 메뉴 목록입니다.\n");
				for(int i=0;i<orderedMenu.menuIndex.length;i++) {
					String str="";
					str+=menuInfo.menuName[orderedMenu.menuIndex[i]] + " ";
					str+=orderedMenu.orderedAmount[i];
					System.out.println(str);
				}
				break;
			}
		}
	}
	
	private boolean isInteger(String str) {
		try{
			Integer.parseInt(str);
			return true;
		}
		catch(Exception e) {
			return false;
		}
	}
	
	private void usePointAmount() {
		while(true) {
			int userPoint = accountData.getAccountData(userAccountIndex).point;
			System.out.println("사용할 마일리지의 액수를 입력해주세요.\n"
					+ "마일리지는 최소 0원부터 사용 가능합니다.\n\n"
					+ "현재 보유 마일리지: "+userPoint+"원"+"\n"
					+ "(c 입력 시 메뉴 화면으로 돌아가기): ");
			String input = scanner.nextLine();
			if(input.equals("c")) {
				needToReturnMainMenu=true;
				break;
			}
			else if(this.isInteger(input)) {
				int inputInt = Integer.parseInt(input);
				if(inputInt>=0&&inputInt<=userPoint&&inputInt<=totalMenuPrice) {
					pointDeduction = inputInt;
					break;
				}
				else {
					System.out.println("[오류] 입력하신 금액만큼 사용할 수 없습니다. 다시 입력해주세요.");
					continue;
				}
			}
			else {
				System.out.println("[오류] 입력하신 금액만큼 사용할 수 없습니다. 다시 입력해주세요.");
				continue;
			}
		}
	}
	
	private void adjustPoint() {
		int userPoint = accountData.getAccountData(userAccountIndex).point;
		accountData.ModifyAccountData(userAccountIndex, accountData.POINT, Integer.toString(userPoint-pointDeduction+(int)(Math.round(totalMenuPrice*pointRatio))));
		pointDeduction = -1;
	}
	
	public void payCash() {
		while(true) {
			int userCash = accountData.getAccountData(userAccountIndex).virtualCash;
			System.out.println("결제 예정 금액: "+(totalMenuPrice-pointDeduction)+"원\n"
										+ "(마일리지 "+pointDeduction+"원 차감 적용됨\n\n"
										+ "현재 나의 잔액: "+userCash+"원\n\n"
										+ "결제를 진행하시겠습니까? (yes / no): ");
			String input = scanner.nextLine();
			if(input.equals("yes")||input.equals("YES")) {
				if(userCash-(totalMenuPrice-pointDeduction)>=0) {
					accountData.ModifyAccountData(userAccountIndex, accountData.VIRTUALCASH, Integer.toString(userCash-(totalMenuPrice-pointDeduction)));
					break;
				}
				else {
					System.out.println("[오류] 잔액이 부족합니다. 메인 메뉴에서 잔액을 추가해주세요.");
					needToReturnMainMenu=true;
					break;
				}
			}
			else if(input.equals("no")||input.equals("NO")) {
				needToReturnMainMenu=true;
				break;
			}
			else {
				System.out.println("[오류] 잘못된 입력입니다. yes 혹은 no를 입력해주세요.");
				continue;
			}
		}
	}
	/////////////////////
}
